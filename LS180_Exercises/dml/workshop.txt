Workshop Schema:
  Devices:
  - id: auto-incrementing integer (PRIMARY KEY)
  - name: string (any length), not null
  - created_at: timestamp; default (NOW?)
Each device has many parts.
Each part is only used in one device.
  Parts:
  - id: auto-incrementing integer (PRIMARY KEY)
  - part_number: integer? UNIQUE, NOT NULL
  - device_id: FOREIGN KEY integer referencing devices.id

#1 -------------------------------------------------------
createdb workshop

CREATE TABLE devices (
  id serial PRIMARY KEY,
  name text NOT NULL,
  created_at timestamp DEFAULT NOW()
);

CREATE TABLE parts (
  id serial PRIMARY KEY,
  part_number integer UNIQUE NOT NULL,
  device_id integer REFERENCES devices
);


#2 -------------------------------------------------------
INSERT INTO devices (name)
VALUES ('Accelerometer'), ('Gyroscope');

INSERT INTO parts (part_number, device_id)
VALUES (1, 1), (2, 1), (3, 1),                  -- Device 1
       (4, 2), (5, 2), (6, 2), (7, 2), (8, 2),  -- Device 2
       (9, NULL), (10, NULL), (11, NULL);       -- Orphan parts


#3 -------------------------------------------------------
SELECT name, part_number
FROM devices 
JOIN parts ON devices.id = parts.device_id;


#4 -------------------------------------------------------
-- Select all parts that have a part number starting with 3.

SELECT * FROM parts
WHERE part_number::text LIKE '3%';


#5 -------------------------------------------------------
-- Select the name of each device along with the number of parts
-- used in that device.

SELECT name, COUNT(parts.id) AS number_of_parts
FROM devices
LEFT JOIN parts ON devices.id = parts.device_id
GROUP BY name;

-- LEFT JOIN in case there is a device with no parts.


#6 -------------------------------------------------------
-- Alter the query above to order results by device names in descending
-- alphabetical order

SELECT name, COUNT(parts.id) AS number_of_parts
FROM devices
LEFT JOIN parts ON devices.id = parts.device_id
GROUP BY name
ORDER BY name DESC;


#7 -------------------------------------------------------
-- Write an SQL query that generates a list of parts currently belonging to a device.

SELECT part_number, device_id
FROM parts
WHERE device_id IS NOT NULL;

-- Write an SQL query that generates a list of parts that do NOT belong to a device.

SELECT part_number, device_id
FROM parts 
WHERE device_id IS NULL;

#8 -------------------------------------------------------
INSERT INTO devices (name)
VALUES ('Magnetometer');

INSERT INTO parts (part_number, device_id)
VALUES (12, 3);

-- Assuming nothing about the existing order of records, write an SQL statement that
-- returns the name of the oldest device from the devices table.

SELECT name AS oldest_device FROM devices 
ORDER BY created_at LIMIT 1;

-- Further Exploration: 
--  If multiple records have the same value for ORDER BY, the identically-valued
--  records are sorted again by their primary key values (eg. id)


#9 -------------------------------------------------------
-- Write an SQL statement to associate the last two parts used for Gyroscope with
-- with Accelerometer instead.

- Update parts.device_id for the LAST 2 parts where device id is 2 
- Subquery and select all parts from parts where device is 2, ordered by id (desc),
-   limited to 2 
- grab the part IDs from the subquery
- Write an update query to set device_id = 1 where part id is in subquery 

UPDATE parts 
SET device_id = 1 
WHERE id IN (SELECT id FROM parts WHERE device_id = 2 
ORDER BY id DESC LIMIT 2);

-- Further Exploration: How would you set the part with the smallest part_number
--  to be associated with Gyroscope? 
(Assume you don't know Gyroscope's ID)
  1: Get the ID of the part with the smallest part_number
  2: Get the ID of the device with the name 'Gyroscope'
  3: Set the smallest part's device_id to the Gyroscope device's ID.

  1:
    SELECT id FROM parts ORDER BY part_number LIMIT 1;
  2: 
    SELECT id FROM devices WHERE name = 'Gyroscope';
  3: 
    UPDATE parts SET device_id = (id from 2)
    WHERE id = (id from 1)

  UPDATE parts 
  SET device_id = (SELECT id FROM devices WHERE name = 'Gyroscope')
  WHERE id = (SELECT id FROM parts ORDER BY part_number LIMIT 1);


#10 -------------------------------------------------------
-- Delete any data related to Accelerometers; also delete any parts associated.

-- Delete associated parts 
DELETE FROM parts
WHERE device_id IN (SELECT id FROM devices WHERE name = 'Accelerometer');

-- Delete accelerometer devices
DELETE FROM devices
WHERE name = 'Accelerometer';

-- Further Exploration: The two statements above must be run in order; if the 
--  Accelerometer devices are deleted first, PostgreSQL will reject the operation
--  and raise an error, since there would be orphaned records in the parts table.

-- If we want to avoid this behavior, we could redefine the schema of the parts table
--  to *cascade* DELETE operations; that is, when a record in the referenced table 
--  (devices) is deleted, all referencing rows in parts are also deleted. 

ALTER TABLE parts
DROP CONSTRAINT parts_device_id_fkey,
ADD FOREIGN KEY(device_id) REFERENCES devices ON DELETE CASCADE;

-- With this change to the schema, we could then delete a device along with its parts
--  in a single SQL statement:

DELETE FROM devices
WHERE name = 'Accelerometer';
-- Also deletes any associated parts.